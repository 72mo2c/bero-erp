/**
 * ุงุฎุชุจุงุฑุงุช ุฎุฏูุฉ ุฅุฏุงุฑุฉ ุงููุนุฑูุงุช ุงูุขููุฉ
 * Tests for Secure Code Management Service
 */

const secureCodeService = require('./secureCodeService');

// ุฏูุงู ูุณุงุนุฏุฉ ููุงุฎุชุจุงุฑุงุช
function assert(condition, message) {
    if (!condition) {
        throw new Error(`ูุดู ุงูุงุฎุชุจุงุฑ: ${message}`);
    }
}

function assertEqual(actual, expected, message) {
    if (actual !== expected) {
        throw new Error(`ูุดู ุงูุงุฎุชุจุงุฑ: ${message}. ุงููุชููุน: ${expected}, ุงููุนูู: ${actual}`);
    }
}

function assertNotNull(value, message) {
    if (value === null || value === undefined) {
        throw new Error(`ูุดู ุงูุงุฎุชุจุงุฑ: ${message}`);
    }
}

// ุงุฎุชุจุงุฑุงุช ุงูุชุดููุฑ
function testEncryption() {
    console.log('๐ ุงุฎุชุจุงุฑ ุงูุชุดููุฑ...');
    
    const originalText = 'test message';
    const encrypted = secureCodeService.encrypt(originalText);
    
    assert(encrypted !== originalText, 'ุงูุชุดููุฑ ูุฌุจ ุฃู ููุชุฌ ูุต ูุฎุชูู');
    assert(encrypted.includes(':'), 'ุงููุต ุงููุดูุฑ ูุฌุจ ุฃู ูุญุชูู ุนูู ูุงุตู');
    
    const decrypted = secureCodeService.decrypt(encrypted);
    assertEqual(decrypted, originalText, 'ูู ุงูุชุดููุฑ ูุฌุจ ุฃู ูุนูุฏ ุงููุต ุงูุฃุตูู');
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุชุดููุฑ ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุชูููุฏ ุงููุนุฑูุงุช
function testCodeGeneration() {
    console.log('๐ ุงุฎุชุจุงุฑ ุชูููุฏ ุงููุนุฑูุงุช...');
    
    // ุงุฎุชุจุงุฑ ุงููุนุฑู ุงูุขูู
    const secureCode = secureCodeService.generateSecureCode();
    assert(secureCode.length >= 8, 'ุงููุนุฑู ุงูุขูู ูุฌุจ ุฃู ูููู 8 ุฃุญุฑู ุนูู ุงูุฃูู');
    
    // ุงุฎุชุจุงุฑ ููุฉ ุงููุนุฑู
    const validation = secureCodeService.validateCodeStrength(secureCode);
    assert(validation.isValid, 'ุงููุนุฑู ุงููููุฏ ูุฌุจ ุฃู ูููู ุตุงูุญ');
    assert(['ูุชูุณุท', 'ููู', 'ููู ุฌุฏุงู'].includes(validation.strength), 
           'ููุฉ ุงููุนุฑู ูุฌุจ ุฃู ุชููู ููุจููุฉ');
    
    // ุงุฎุชุจุงุฑ ุงููุนุฑูุงุช ุงููุฎุตุตุฉ
    const customCode = secureCodeService.generateSecureCode(12, {
        includeSpecialChars: false,
        includeNumbers: true
    });
    assert(customCode.length === 12, 'ุทูู ุงููุนุฑู ุงููุฎุตุต ูุฌุจ ุฃู ูููู ุตุญูุญ');
    
    console.log('โ ุงุฎุชุจุงุฑ ุชูููุฏ ุงููุนุฑูุงุช ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุฅุฏุงุฑุฉ ุงููุนุฑูุงุช
function testCodeManagement() {
    console.log('โ๏ธ ุงุฎุชุจุงุฑ ุฅุฏุงุฑุฉ ุงููุนุฑูุงุช...');
    
    // ุฅูุดุงุก ูุนุฑู ูุคุณุณู
    const institutionId = 'INST_123';
    const codeType = 'admin';
    
    const codeResult = secureCodeService.createInstitutionalCode(institutionId, codeType);
    assertNotNull(codeResult.codeId, 'ูุฌุจ ุฅุฑุฌุงุน ูุนุฑู ูุฑูุฏ');
    assertNotNull(codeResult.code, 'ูุฌุจ ุฅุฑุฌุงุน ุงููุนุฑู ุงููุนูู');
    assertNotNull(codeResult.encryptedData, 'ูุฌุจ ุฅุฑุฌุงุน ุงูุจูุงูุงุช ุงููุดูุฑุฉ');
    
    const codeId = codeResult.codeId;
    
    // ุงูุชุญูู ูู ุตุญุฉ ุงููุนุฑู
    const validation = secureCodeService.validateCode(codeResult.code, institutionId);
    assert(validation.isValid, 'ุงููุนุฑู ุงูุฌุฏูุฏ ูุฌุจ ุฃู ูููู ุตุงูุญ');
    assertEqual(validation.codeData.institutionId, institutionId, 'ูุนุฑู ุงููุคุณุณุฉ ูุฌุจ ุฃู ูููู ุตุญูุญ');
    
    // ุงูุญุตูู ุนูู ุฅุญุตุงุฆูุงุช ุงููุนุฑู
    const stats = secureCodeService.getCodeStats(codeId);
    assertNotNull(stats, 'ูุฌุจ ุฅุฑุฌุงุน ุฅุญุตุงุฆูุงุช ุงููุนุฑู');
    assertEqual(stats.usageCount, 1, 'ุนุฏุงุฏ ุงูุงุณุชุฎุฏุงู ูุฌุจ ุฃู ูููู 1');
    
    // ุชุญุฏูุซ ุญุงูุฉ ุงููุนุฑู
    const updatedCode = secureCodeService.updateCodeStatus(codeId, { isActive: false });
    assert(!updatedCode.isActive, 'ุญุงูุฉ ุงููุนุฑู ูุฌุจ ุฃู ุชุตุจุญ ุบูุฑ ูุดุทุฉ');
    
    // ุงูุชุญูู ูู ุนุฏู ุตุญุฉ ุงููุนุฑู ุจุนุฏ ุงูุฅููุงู
    const invalidValidation = secureCodeService.validateCode(codeResult.code);
    assert(!invalidValidation.isValid, 'ุงููุนุฑู ุบูุฑ ุงููุดุท ูุฌุจ ุฃู ูููู ุบูุฑ ุตุงูุญ');
    
    // ุชูุธูู ุงููุนุฑู
    const deleted = secureCodeService.deleteCode(codeId);
    assert(deleted, 'ุญุฐู ุงููุนุฑู ูุฌุจ ุฃู ููุฌุญ');
    
    console.log('โ ุงุฎุชุจุงุฑ ุฅุฏุงุฑุฉ ุงููุนุฑูุงุช ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุงูุฃูุงู
function testSecurity() {
    console.log('๐ก๏ธ ุงุฎุชุจุงุฑ ุงูุฃูุงู...');
    
    const testCode = 'SecurePass123!';
    
    // ุงุฎุชุจุงุฑ Rate Limiting
    const maxAttempts = secureCodeService.config.maxAttempts;
    
    // ูุญุงููุงุช ูุงุดูุฉ ูุชุนุฏุฏุฉ
    for (let i = 0; i < maxAttempts; i++) {
        const result = secureCodeService.validateCode('wrong_code');
        assert(!result.isValid, 'ุงููุนุฑู ุงูุฎุทุฃ ูุฌุจ ุฃู ูููู ุบูุฑ ุตุงูุญ');
    }
    
    // ูุญุงููุฉ ุจุนุฏ ุชุฌุงูุฒ ุงูุญุฏ
    const rateLimitedResult = secureCodeService.validateCode('wrong_code');
    assert(rateLimitedResult.rateLimited, 'ูุฌุจ ุชูุนูู Rate Limiting');
    assertEqual(rateLimitedResult.error, 'ุชู ุชุฌุงูุฒ ุญุฏ ุงููุญุงููุงุช ุงููุณููุญ', 
               'ุฑุณุงูุฉ ุงูุฎุทุฃ ูุฌุจ ุฃู ุชููู ุตุญูุญุฉ');
    
    // ุงุฎุชุจุงุฑ ุงูููุฉ
    const weakCode = '123';
    const weakValidation = secureCodeService.validateCodeStrength(weakCode);
    assert(!weakValidation.isValid, 'ุงููุนุฑู ุงูุถุนูู ูุฌุจ ุฃู ูููู ุบูุฑ ุตุงูุญ');
    assert(weakValidation.errors.length > 0, 'ูุฌุจ ูุฌูุฏ ุฃุฎุทุงุก ูููุนุฑู ุงูุถุนูู');
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุฃูุงู ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุงูุชุณุฌูู ูุงููุฑุงูุจุฉ
function testLoggingAndMonitoring() {
    console.log('๐ ุงุฎุชุจุงุฑ ุงูุชุณุฌูู ูุงููุฑุงูุจุฉ...');
    
    const initialLogCount = secureCodeService.usageLogs.length;
    
    // ุฅูุดุงุก ูุนุฑู ููุฑุงูุจุชู
    const result = secureCodeService.createInstitutionalCode('TEST_INST', 'test');
    const codeId = result.codeId;
    
    // ุงุณุชุฎุฏุงู ุงููุนุฑู
    secureCodeService.validateCode(result.code, 'TEST_INST');
    
    // ูุญุต ุงูุฅุญุตุงุฆูุงุช
    const systemStats = secureCodeService.getSystemStats();
    assertNotNull(systemStats.totalCodes, 'ูุฌุจ ุฅุฑุฌุงุน ุฅุฌูุงูู ุงููุนุฑูุงุช');
    assert(systemStats.totalCodes >= 1, 'ุฅุฌูุงูู ุงููุนุฑูุงุช ูุฌุจ ุฃู ูููู โฅ 1');
    
    // ูุญุต ุงูุชูุจููุงุช
    const alerts = secureCodeService.getAlerts();
    assert(Array.isArray(alerts), 'ุงูุชูุจููุงุช ูุฌุจ ุฃู ุชููู ูุตูููุฉ');
    
    // ุชูุธูู ุงููุนุฑู
    secureCodeService.deleteCode(codeId);
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุชุณุฌูู ูุงููุฑุงูุจุฉ ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุงูุจุญุซ ูุงูููุชุฑุฉ
function testSearchAndFiltering() {
    console.log('๐ ุงุฎุชุจุงุฑ ุงูุจุญุซ ูุงูููุชุฑุฉ...');
    
    // ุฅูุดุงุก ุนุฏุฉ ูุนุฑูุงุช ุจุงุฎุชูุงู ุงูุฃููุงุน
    const code1 = secureCodeService.createInstitutionalCode('INST_A', 'admin');
    const code2 = secureCodeService.createInstitutionalCode('INST_A', 'user');
    const code3 = secureCodeService.createInstitutionalCode('INST_B', 'admin');
    
    // ุงูุจุญุซ ุญุณุจ ุงููุคุณุณุฉ
    const instAResults = secureCodeService.searchCodes({ institutionId: 'INST_A' });
    assertEqual(instAResults.length, 2, 'ูุฌุจ ุงูุนุซูุฑ ุนูู ูุนุฑููู ููุคุณุณุฉ INST_A');
    
    // ุงูุจุญุซ ุญุณุจ ุงูููุน
    const adminResults = secureCodeService.searchCodes({ type: 'admin' });
    assertEqual(adminResults.length, 2, 'ูุฌุจ ุงูุนุซูุฑ ุนูู ูุนุฑููู ูู ููุน admin');
    
    // ุงูุจุญุซ ุงููุฑูุจ
    const combinedResults = secureCodeService.searchCodes({ 
        institutionId: 'INST_A', 
        type: 'admin' 
    });
    assertEqual(combinedResults.length, 1, 'ูุฌุจ ุงูุนุซูุฑ ุนูู ูุนุฑู ูุงุญุฏ');
    
    // ุชูุธูู
    secureCodeService.deleteCode(code1.codeId);
    secureCodeService.deleteCode(code2.codeId);
    secureCodeService.deleteCode(code3.codeId);
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุจุญุซ ูุงูููุชุฑุฉ ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุงูุจูุงูุงุช ุงููุชูุฏูุฉ
function testAdvancedData() {
    console.log('๐ง ุงุฎุชุจุงุฑ ุงูุจูุงูุงุช ุงููุชูุฏูุฉ...');
    
    // ุฅูุดุงุก ูุนุฑู ูุน ุญุฏ ุงุณุชุฎุฏุงู
    const codeResult = secureCodeService.createInstitutionalCode('ADVANCED_TEST', 'limited');
    const codeId = codeResult.codeId;
    
    // ุชุญุฏูุซ ุญุฏ ุงูุงุณุชุฎุฏุงู
    secureCodeService.updateCodeStatus(codeId, { maxUsage: 3 });
    
    // ุงุณุชุฎุฏุงู ุงููุนุฑู ุนุฏุฉ ูุฑุงุช
    for (let i = 0; i < 3; i++) {
        const validation = secureCodeService.validateCode(codeResult.code);
        assert(validation.isValid, `ุงูุงุณุชุฎุฏุงู ุฑูู ${i + 1} ูุฌุจ ุฃู ููุฌุญ`);
    }
    
    // ูุญุงููุฉ ุชุฌุงูุฒ ุงูุญุฏ
    const exceededValidation = secureCodeService.validateCode(codeResult.code);
    assert(!exceededValidation.isValid, 'ุชุฌุงูุฒ ุญุฏ ุงูุงุณุชุฎุฏุงู ูุฌุจ ุฃู ููุดู');
    assertEqual(exceededValidation.error, 'ุชู ุชุฌุงูุฒ ุญุฏ ุงูุงุณุชุฎุฏุงู ุงููุณููุญ', 
               'ุฑุณุงูุฉ ุฎุทุฃ ุชุฌุงูุฒ ุงูุญุฏ ูุฌุจ ุฃู ุชููู ุตุญูุญุฉ');
    
    // ุงุฎุชุจุงุฑ ุชูุฏูุฏ ุงูุตูุงุญูุฉ
    const extendedCode = secureCodeService.extendCodeExpiry(codeId, 48);
    assert(extendedCode.expiresAt > codeResult.expiresAt, 'ุชุงุฑูุฎ ุงูุงูุชูุงุก ูุฌุจ ุฃู ูุชูุฏุฏ');
    
    // ุชูุธูู
    secureCodeService.deleteCode(codeId);
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุจูุงูุงุช ุงููุชูุฏูุฉ ูุฌุญ');
}

// ุงุฎุชุจุงุฑุงุช ุงูุงุณุชูุฑุงุฏ ูุงูุชุตุฏูุฑ
function testImportExport() {
    console.log('๐พ ุงุฎุชุจุงุฑ ุงูุงุณุชูุฑุงุฏ ูุงูุชุตุฏูุฑ...');
    
    // ุฅูุดุงุก ุจูุงูุงุช ููุงุฎุชุจุงุฑ
    const testCode = secureCodeService.createInstitutionalCode('EXPORT_TEST', 'export');
    
    // ุชุตุฏูุฑ ุงูุจูุงูุงุช
    const exportedData = secureCodeService.exportData();
    assertNotNull(exportedData.codes, 'ุงูุจูุงูุงุช ุงููุตุฏุฑุฉ ูุฌุจ ุฃู ุชุญุชูู ุนูู ุงููุนุฑูุงุช');
    assert(Array.isArray(exportedData.codes), 'ุงููุนุฑูุงุช ูุฌุจ ุฃู ุชููู ูุตูููุฉ');
    assertEqual(exportedData.codes.length, 1, 'ูุฌุจ ุชุตุฏูุฑ ูุนุฑู ูุงุญุฏ');
    
    // ุญุฐู ุงููุนุฑู ุงูุฃุตูู
    secureCodeService.deleteCode(testCode.codeId);
    
    // ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช
    const importResult = secureCodeService.importData(exportedData);
    assert(importResult, 'ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ูุฌุจ ุฃู ููุฌุญ');
    
    // ุงูุชุญูู ูู ุงูุงุณุชูุฑุงุฏ
    const importedCode = secureCodeService.searchCodes({ 
        institutionId: 'EXPORT_TEST' 
    });
    assertEqual(importedCode.length, 1, 'ูุฌุจ ุงูุนุซูุฑ ุนูู ุงููุนุฑู ุงููุณุชูุฑุฏ');
    
    // ุชูุธูู
    secureCodeService.deleteCode(importedCode[0].codeId);
    
    console.log('โ ุงุฎุชุจุงุฑ ุงูุงุณุชูุฑุงุฏ ูุงูุชุตุฏูุฑ ูุฌุญ');
}

// ุงุฎุชุจุงุฑ ุดุงูู ูููุธุงู
function runFullSystemTest() {
    console.log('๐ ุจุฏุก ุงูุงุฎุชุจุงุฑ ุงูุดุงูู ูููุธุงู...\n');
    
    try {
        testEncryption();
        testCodeGeneration();
        testCodeManagement();
        testSecurity();
        testLoggingAndMonitoring();
        testSearchAndFiltering();
        testAdvancedData();
        testImportExport();
        
        console.log('\n๐ ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ูุฌุญุช! ุงููุธุงู ูุนูู ุจุดูู ุตุญูุญ.');
        
        // ุนุฑุถ ุฅุญุตุงุฆูุงุช ููุงุฆูุฉ
        const finalStats = secureCodeService.getSystemStats();
        console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงููุธุงู ุงูููุงุฆูุฉ:');
        console.log(`- ุฅุฌูุงูู ุงููุนุฑูุงุช: ${finalStats.totalCodes}`);
        console.log(`- ุงููุนุฑูุงุช ุงููุดุทุฉ: ${finalStats.activeCodes}`);
        console.log(`- ุงูุชูุจููุงุช ุบูุฑ ุงูููุฑูุกุฉ: ${finalStats.unreadAlerts}`);
        
        return true;
    } catch (error) {
        console.error(`\nโ ูุดู ุงุฎุชุจุงุฑ: ${error.message}`);
        console.error(error.stack);
        return false;
    }
}

// ุชุดุบูู ุงูุงุฎุชุจุงุฑุงุช
if (require.main === module) {
    runFullSystemTest();
}

module.exports = {
    runFullSystemTest,
    assert,
    assertEqual,
    assertNotNull,
    testEncryption,
    testCodeGeneration,
    testCodeManagement,
    testSecurity,
    testLoggingAndMonitoring,
    testSearchAndFiltering,
    testAdvancedData,
    testImportExport
};